service: product-service
frameworkVersion: '3'

useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  region: ${env:REGION}
  stage: dev

  environment:
    SNS_ARN:
      Ref: SNSTopic

  iamRoleStatements:
    - Effect: "Allow"
      Action: "sqs:*"
      Resource:
        - "${cf:import-service-${env:STAGE}.NewProductSQSQueueArn}"
    - Effect: "Allow"
      Action: "sns:*"
      Resource:
        Ref: SNSTopic

resources:
  Resources:
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_SUBSCRIPTION_EMAIL}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          IsExpensive:
            - "false"
    SNSSubscription1:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:SNS_SUBSCRIPTION_EMAIL_FOR_EXPENSIVE_PRODUCTS}
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          IsExpensive:
            - "true"

plugins:
  - serverless-plugin-webpack
  - serverless-dotenv-plugin

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: products
          method: get
          cors: true
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          cors: true
  createProduct:
    handler: handler.createProduct
    events:
        - http:
            path: products
            method: post
            cors: true
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            - "${cf:import-service-${env:STAGE}.NewProductSQSQueueArn}"